<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Gumtree API Test - Platform Specific Headers">
      <stringProp name="TestPlan.comments">Test plan generated from cURL command for Gumtree VIP screen</stringProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="REG_USER_NAME" elementType="Argument">
            <stringProp name="Argument.name">REG_USER_NAME</stringProp>
            <stringProp name="Argument.value">abaent.salmon${__Random(1000,9999)}@maildrop.cc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="REG_OPTIN_USER_NAME" elementType="Argument">
            <stringProp name="Argument.name">REG_OPTIN_USER_NAME</stringProp>
            <stringProp name="Argument.value">donnyoptin${__Random(1000,9999)}@maildrop.cc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ACTIVATION_TOKEN_DUMMY" elementType="Argument">
            <stringProp name="Argument.name">ACTIVATION_TOKEN_DUMMY</stringProp>
            <stringProp name="Argument.value">dummyActivateTokenForTest${__Random(1000,9999)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NON_EXISTENT_EMAIL" elementType="Argument">
            <stringProp name="Argument.name">NON_EXISTENT_EMAIL</stringProp>
            <stringProp name="Argument.value">nonexistentuser${__Random(10000,99999)}@example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">data/auth_tokens.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">userId,userToken,userAuthorization,threatMetrixSession,userEmail,userDisplayName,accountId,userType,lastUpdated</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG2: Registration Scenario (Android)">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Registration HTTP Header Manager (Android)">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">user-agent</stringProp>
              <stringProp name="Header.value">${__P(ANDROID_USER_AGENT)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">platform</stringProp>
              <stringProp name="Header.value">${__P(ANDROID_PLATFORM)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">udid</stringProp>
              <stringProp name="Header.value">${__P(ANDROID_UDID)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">app-version</stringProp>
              <stringProp name="Header.value">${__P(ANDROID_APP_VERSION)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">device</stringProp>
              <stringProp name="Header.value">${__P(ANDROID_DEVICE)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">os-version</stringProp>
              <stringProp name="Header.value">${__P(ANDROID_OS_VERSION)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">experiments</stringProp>
              <stringProp name="Header.value">${__P(ANDROID_EXPERIMENTS)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">app-debug-mode</stringProp>
              <stringProp name="Header.value">${__P(ANDROID_APP_DEBUG_MODE)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">threat-metrix-session</stringProp>
              <stringProp name="Header.value">${threatMetrixSession}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.1 Registration Request - Opt-Out Marketing">
          <stringProp name="TestPlan.comments">用户注册接口 (不接受营销邮件)。预期返回204。</stringProp>
          <stringProp name="HTTPSampler.domain">${__P(HOST_BFF)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(PROTOCOL)}</stringProp>
          <stringProp name="HTTPSampler.path">/v1/registration</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;firstName&quot;: &quot;${__P(REG_FIRST_NAME)}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${__P(REG_LAST_NAME)}&quot;,&#xd;
    &quot;userName&quot;: &quot;${REG_USER_NAME}&quot;,&#xd;
    &quot;userSecret&quot;: &quot;${__P(REG_PASSWORD)}&quot;,&#xd;
    &quot;isMarketingOptIn&quot;: false&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="断言状态码 204 (No Content)">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">期望注册成功返回状态码204 (No Content)。</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="断言响应体为空" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">期望注册成功返回204时响应体为空。</stringProp>
            <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.2 Registration Request - Opt-In Marketing">
          <stringProp name="TestPlan.comments">用户注册接口 (接受营销邮件)。预期返回204。</stringProp>
          <stringProp name="HTTPSampler.domain">${__P(HOST_BFF)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(PROTOCOL)}</stringProp>
          <stringProp name="HTTPSampler.path">/v1/registration</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;firstName&quot;: &quot;${__P(REG_OPTIN_FIRST_NAME)}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${__P(REG_OPTIN_LAST_NAME)}&quot;,&#xd;
    &quot;userName&quot;: &quot;${REG_OPTIN_USER_NAME}&quot;,&#xd;
    &quot;userSecret&quot;: &quot;${__P(REG_OPTIN_PASSWORD)}&quot;,&#xd;
    &quot;isMarketingOptIn&quot;: true&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="断言状态码 204 (No Content)" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">期望注册成功(接受营销)返回状态码204 (No Content)。</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="断言响应体为空" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">期望注册成功(接受营销)返回204时响应体为空。</stringProp>
            <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
