<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="message_unreads">
      <intProp name="ThreadGroup.num_threads">1</intProp>
      <intProp name="ThreadGroup.ramp_time">1</intProp>
      <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
        <stringProp name="LoopController.loops">1</stringProp>
        <boolProp name="LoopController.continue_forever">false</boolProp>
      </elementProp>
    </ThreadGroup>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - 读取认证信息" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">data/web_auth_tokens.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">timestamp,username,statusCode,responseTime,sessionId,rememberMe,gtMc,location,upstreamServiceTime,userToken,userAuthorization,conversationsToken,cookieString,testResult</stringProp>
      </CSVDataSet>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="1. 加载动态认证数据" enabled="true">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">// 直接加载认证数据
// 动态定位项目根目录
import org.apache.jmeter.services.FileServer

File baseDir = new File(FileServer.getFileServer().getBaseDir())
File projectRoot = baseDir
int hops = 0
while (hops &lt; 6 &amp;&amp; projectRoot != null &amp;&amp; !new File(projectRoot, &quot;data&quot;).exists()) {
  if (projectRoot.name == &quot;jmeter-api-project&quot;) break
  projectRoot = projectRoot.getParentFile()
  hops++
}
if (projectRoot == null) projectRoot = baseDir

def authDataFile = new File(projectRoot, &quot;data/auth_data.properties&quot;)

if (authDataFile.exists()) {
  try {
    def props = new Properties()
    props.load(new FileReader(authDataFile))
    
    // 检查数据是否过期（30分钟）
    def lastUpdated = props.getProperty(&quot;last_updated&quot;)
    def currentTime = System.currentTimeMillis()
    def dataAge = currentTime - Long.parseLong(lastUpdated)
    def maxAge = 30 * 60 * 1000 // 30分钟
    
    if (dataAge &gt; maxAge) {
      log.warn(&quot;⚠ 认证数据已过期，数据年龄: ${dataAge / 1000 / 60} 分钟&quot;)
      vars.put(&quot;AUTH_COOKIE_STRING&quot;, &quot;EXPIRED&quot;)
    } else {
      // 构建Cookie字符串
      def cookieParts = []
      def priorityCookies = [
        &apos;gt_p&apos;, &apos;gt_s&apos;, &apos;GTSELLERSESSIONID&apos;, &apos;gt_tm&apos;, 
        &apos;conversationsToken&apos;, &apos;gt_rememberMe&apos;, &apos;gt_mc&apos;,
        &apos;_ga&apos;, &apos;_fbp&apos;, &apos;pbjs-unifiedid&apos;, &apos;gt_userPref&apos;,
        &apos;waap_id&apos;, &apos;lux_uid&apos;, &apos;gt_bff_ab2&apos;, &apos;gt_gb_exp_uid&apos;,
        &apos;eupubconsent-v2&apos;, &apos;OptanonConsent&apos;
      ]
      
      priorityCookies.each { cookieName -&gt;
        def value = props.getProperty(cookieName)
        if (value) {
          cookieParts &lt;&lt; &quot;${cookieName}=${value}&quot;
        }
      }
      
      def cookieString = cookieParts.join(&quot;; &quot;)
      vars.put(&quot;AUTH_COOKIE_STRING&quot;, cookieString)
      log.info(&quot;✓ 成功加载认证数据，Cookie字符串长度: ${cookieString.length()}&quot;)
      log.info(&quot;包含的认证字段: ${cookieParts.size()} 个&quot;)
    }
  } catch (Exception e) {
    log.error(&quot;❌ 加载认证数据失败: ${e.message}&quot;)
    vars.put(&quot;AUTH_COOKIE_STRING&quot;, &quot;ERROR&quot;)
  }
} else {
  log.warn(&quot;⚠ 认证数据文件不存在，请先运行登录测试&quot;)
  vars.put(&quot;AUTH_COOKIE_STRING&quot;, &quot;NO_AUTH_DATA&quot;)
}</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="2. 验证认证信息" enabled="true">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">// 验证认证信息是否正确读取
log.info(&quot;=== 认证信息验证 ===&quot;)
log.info(&quot;动态Cookie字符串: ${vars.get(&apos;AUTH_COOKIE_STRING&apos;)}&quot;)

// 检查是否有有效的认证信息
def cookieString = vars.get(&quot;AUTH_COOKIE_STRING&quot;)
def hasValidAuth = false

if (cookieString &amp;&amp; !cookieString.startsWith(&quot;NO_&quot;) &amp;&amp; !cookieString.equals(&quot;ERROR&quot;) &amp;&amp; !cookieString.equals(&quot;EXPIRED&quot;)) {
    hasValidAuth = true
    log.info(&quot;✓ 找到有效认证信息&quot;)
} else {
    log.warn(&quot;⚠ 未找到有效认证信息，可能需要先运行tg1登录测试&quot;)
    log.warn(&quot;认证状态: ${cookieString}&quot;)
}

// 设置认证状态变量
vars.put(&quot;HAS_VALID_AUTH&quot;, hasValidAuth.toString())
vars.put(&quot;AUTH_STATUS&quot;, hasValidAuth ? &quot;AUTHENTICATED&quot; : &quot;NOT_AUTHENTICATED&quot;)

log.info(&quot;认证状态: ${vars.get(&apos;AUTH_STATUS&apos;)}&quot;)
log.info(&quot;=== 认证信息验证完成 ===&quot;)
</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager with Auth" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="cookie" elementType="Header">
            <stringProp name="Header.name">Cookie</stringProp>
            <stringProp name="Header.value">${AUTH_COOKIE_STRING}</stringProp>
          </elementProp>
          <elementProp name="if-none-match" elementType="Header">
            <stringProp name="Header.name">if-none-match</stringProp>
            <stringProp name="Header.value">W/&quot;afe1-ZFtcpo3oJPsAQ+ULmU063d4FJ6k&quot;</stringProp>
          </elementProp>
          <elementProp name="priority" elementType="Header">
            <stringProp name="Header.name">priority</stringProp>
            <stringProp name="Header.value">u=1, i</stringProp>
          </elementProp>
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">${__P(CONTENT_TYPE)}</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">${__P(USER_AGENT)}</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">${__P(ACCEPT)}</stringProp>
          </elementProp>
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">${__P(ACCEPT_LANGUAGE)}</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">${__P(ACCEPT_ENCODING)}</stringProp>
          </elementProp>
          <elementProp name="Origin" elementType="Header">
            <stringProp name="Header.name">Origin</stringProp>
            <stringProp name="Header.value">${__P(ORIGIN)}</stringProp>
          </elementProp>
          <elementProp name="Referer" elementType="Header">
            <stringProp name="Header.name">Referer</stringProp>
            <stringProp name="Header.value">${__P(REFERER)}</stringProp>
          </elementProp>
          <elementProp name="Connection" elementType="Header">
            <stringProp name="Header.name">Connection</stringProp>
            <stringProp name="Header.value">${__P(CONNECTION)}</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">${__P(SEC_CH_UA)}</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">${__P(SEC_CH_UA_MOBILE)}</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">${__P(SEC_CH_UA_PLATFORM)}</stringProp>
          </elementProp>
          <elementProp name="sec-fetch-site" elementType="Header">
            <stringProp name="Header.name">sec-fetch-site</stringProp>
            <stringProp name="Header.value">${__P(SEC_FETCH_SITE)}</stringProp>
          </elementProp>
          <elementProp name="sec-fetch-mode" elementType="Header">
            <stringProp name="Header.name">sec-fetch-mode</stringProp>
            <stringProp name="Header.value">${__P(SEC_FETCH_MODE)}</stringProp>
          </elementProp>
          <elementProp name="sec-fetch-dest" elementType="Header">
            <stringProp name="Header.name">sec-fetch-dest</stringProp>
            <stringProp name="Header.value">${__P(SEC_FETCH_DEST)}</stringProp>
          </elementProp>
          <elementProp name="Cache-Control" elementType="Header">
            <stringProp name="Header.name">Cache-Control</stringProp>
            <stringProp name="Header.value">${__P(CACHE_CONTROL)}</stringProp>
          </elementProp>
          <elementProp name="Pragma" elementType="Header">
            <stringProp name="Header.name">Pragma</stringProp>
            <stringProp name="Header.value">${__P(PRAGMA)}</stringProp>
          </elementProp>
          <elementProp name="Host" elementType="Header">
            <stringProp name="Header.name">Host</stringProp>
            <stringProp name="Header.value">${__P(HOST)}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="message_unreads">
        <stringProp name="HTTPSampler.domain">${__P(HOST_BFF)}</stringProp>
        <stringProp name="HTTPSampler.protocol">${__P(PROTOCOL)}</stringProp>
        <stringProp name="HTTPSampler.path">/bff-api/message-centre/messages/unread</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
      </HTTPSamplerProxy>
      <hashTree>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="检查状态码200">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">true</boolProp>
          <intProp name="Assertion.test_type">8</intProp>
        </ResponseAssertion>
        <hashTree/>
        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="4. 验证认证数据使用">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// 验证认证数据使用
def cookieString = vars.get(&quot;AUTH_COOKIE_STRING&quot;)
def responseCode = prev.getResponseCode()
def responseTime = prev.getTime()

log.info(&quot;=== TG9 认证数据使用验证 ===&quot;)
log.info(&quot;响应状态码: ${responseCode}&quot;)
log.info(&quot;响应时间: ${responseTime}ms&quot;)
log.info(&quot;Cookie字符串长度: ${cookieString.length()}&quot;)

if (responseCode == 200) {
  log.info(&quot;✓ TG9 API调用成功，认证数据有效&quot;)
} else if (responseCode == 401 || responseCode == 403) {
  log.warn(&quot;⚠ TG9 认证失败，可能需要重新登录&quot;)
} else if (responseCode == 247) {
  log.warn(&quot;⚠ TG9 安全拦截，可能需要更多认证信息&quot;)
} else {
  log.warn(&quot;⚠ TG9 其他错误，状态码: ${responseCode}&quot;)
}

// 检查认证数据状态
if (cookieString.startsWith(&quot;NO_&quot;) || cookieString.equals(&quot;ERROR&quot;) || cookieString.equals(&quot;EXPIRED&quot;)) {
  log.warn(&quot;⚠ TG9 认证数据不可用: ${cookieString}&quot;)
} else {
  log.info(&quot;✓ TG9 认证数据正常使用&quot;)
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="cacheKey">false</stringProp>
        </JSR223PostProcessor>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
