<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Gumtree API Test - Platform Specific Headers">
      <stringProp name="TestPlan.comments">Test plan generated from cURL command for Gumtree VIP screen</stringProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG1.1 login/exchange">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Dynamic Threat Metrix Session Property">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.util.UUID
String dynamicSessionId = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;).toLowerCase()
props.put(&quot;dynamic_threat_metrix_session&quot;, dynamicSessionId)
log.info(&quot;JSR223 PreProc (TG1): Set dynamic_threat_metrix_session property to: &quot; + dynamicSessionId)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">data/auth_tokens.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">userId,userToken,userAuthorization,threatMetrixSession,userEmail,userDisplayName,accountId,userType,lastUpdated</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager (iOS)">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">authorisation-user</stringProp>
              <stringProp name="Header.value">Basic bW9iaWxlOjBudGgzbTB2MyE=</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">authorisation-user-email</stringProp>
              <stringProp name="Header.value">${__P(CORRECT_USERNAME)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">authorisation-user-token</stringProp>
              <stringProp name="Header.value">${userToken}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">authorization</stringProp>
              <stringProp name="Header.value">${userAuthorization}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">user-agent</stringProp>
              <stringProp name="Header.value">${__P(IOS_USER_AGENT_BFF)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">platform</stringProp>
              <stringProp name="Header.value">${__P(IOS_PLATFORM)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">udid</stringProp>
              <stringProp name="Header.value">${__P(IOS_UDID)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">app-version</stringProp>
              <stringProp name="Header.value">${__P(IOS_APP_VERSION_BFF)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">experiments</stringProp>
              <stringProp name="Header.value">${__P(IOS_EXPERIMENTS_BFF)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">app-debug-mode</stringProp>
              <stringProp name="Header.value">${__P(IOS_APP_DEBUG_MODE)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">userid</stringProp>
              <stringProp name="Header.value">${__P(IOS_USERID_HEADER)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Cookie</stringProp>
              <stringProp name="Header.value">${__P(IOS_COOKIE_GCLB_BFF)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept-language</stringProp>
              <stringProp name="Header.value">${__P(IOS_ACCEPT_LANGUAGE)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">device-type</stringProp>
              <stringProp name="Header.value">${__P(IOS_DEVICE_TYPE)}</stringProp>
            </elementProp>
            <elementProp name="accountid" elementType="Header">
              <stringProp name="Header.name">accountid</stringProp>
              <stringProp name="Header.value">${__P(IOS_ACCOUNTID)}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.1 login/exchange">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <intProp name="HTTPSampler.connect_timeout">0</intProp>
          <intProp name="HTTPSampler.response_timeout">0</intProp>
          <stringProp name="HTTPSampler.domain">${__P(HOST_BFF)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(PROTOCOL)}</stringProp>
          <stringProp name="HTTPSampler.path">/v1/login/exchange</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应代码断言 - 200 OK">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="断言 userId">
            <stringProp name="JSON_PATH">$.userId</stringProp>
            <stringProp name="EXPECTED_VALUE">${__P(CORRECT_USERID)}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="断言 userEmail">
            <stringProp name="JSON_PATH">$.userEmail</stringProp>
            <stringProp name="EXPECTED_VALUE">${__P(CORRECT_USERNAME)}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Extract Tokens to Properties and Write to CSV">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import java.io.File

// --- 1. Get response data ---
String responseData = prev.getResponseDataAsString()
if (!prev.isSuccessful() || !responseData) {
    log.warn(&quot;JSR223: Sampler failed or response was empty. Skipping token extraction and CSV writing.&quot;)
    return
}

try {
    // --- 2. Parse JSON and extract needed fields ---
    def json = new JsonSlurper().parseText(responseData)
    String userId = json.userId?.toString()
    String userToken = json.userToken?.toString()
    String userAuthorization = json.userAuthorization?.toString()
    String userEmail = json.userEmail?.toString()
    String userDisplayName = json.userDisplayName?.toString()
    String accountId = json.accountId?.toString()
    String userType = json.userType?.toString()
    String threatMetrixSession = props.get(&quot;dynamic_threat_metrix_session&quot;) ?: &quot;&quot;

    if (!(userId &amp;&amp; userToken &amp;&amp; userAuthorization)) {
        log.error(&quot;JSR223: Missing required fields. Skipping CSV write.&quot;)
        return
    }

    // --- 3. Write to CSV ---
    String projectRoot = props.get(&quot;projectRoot&quot;) ?: System.getProperty(&quot;user.dir&quot;)
    File dataDir = new File(projectRoot, &quot;data&quot;)
    dataDir.mkdirs()

    File tokenFile = new File(dataDir, &quot;auth_tokens.csv&quot;)
    String timestamp = new Date().format(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    tokenFile.withWriter(&apos;UTF-8&apos;) { writer -&gt;
        writer.writeLine(&apos;userId,userToken,userAuthorization,threatMetrixSession,userEmail,userDisplayName,accountId,userType,lastUpdated&apos;)
        writer.writeLine(&quot;${userId},${userToken},${userAuthorization},${threatMetrixSession},${userEmail},${userDisplayName},${accountId},${userType},${timestamp}&quot;)
    }

    log.info(&quot;JSR223: Token info written to ${tokenFile.absolutePath}, ${timestamp}&quot;)

} catch (Exception e) {
    log.error(&quot;JSR223: Exception during token extraction or CSV writing.&quot;, e)
    prev.setSuccessful(false)
    prev.setResponseMessage(&quot;JSR223 Error: ${e.message}&quot;)
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
